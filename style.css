/* h1 {
    color: blue;
    color: rgb(0, 255, 0) ;
    color: #00ff00;
    color: #0f0;
} */

body {
    color: #333333;
    /* フォントの世界は奥が深いのですが、今回 Verdana （バーダナ）というフォントを使ってね、　
    　　それがなかったらゴシック体フォントを使ってね、という意味で sans-serif（サンセルフ） と書いてあげましょう。 */
    font-family: verdana, sans-serif;
    /* margin-top: opx;
    margin-bottom: opx;
    margin-right: opx;
    margin-left: opx;
    margin: 0px; */
    margin: 0;
    background-color: rgb(255, 229, 174);
}

header {
    /* header がどの領域を占めているかわかりやすいように背景色をつけてあげます。 */
    /* header {} としてあげて、背景色をつけるには background-color というプロパティを指定してあげます。 */
    background-color: rgb(253, 163, 45);
    padding-top: 32px;
    padding-bottom: 32px;
}

.container {
  /* background-color: pink; */
  width: 600px;
  /* このようにすると、この余った領域を左右に均等に割り当ててくれるので、結果としてこの領域が中央揃えになるはずです。 */
  margin-right: auto;
  margin-left: auto;
  /* Flexbox は奥が深いのですが、横に並べたい要素があったら、その親要素にプロパティを追加してあげれば OK です。 */
  /* 今回だと icon と info の親要素は container なので、こちらにプロパティを追加してあげます。 */
  /* どうするかというと display: flex; としてあげれば OK です。 */
  display: flex;
  /* Flexbox で縦方向に要素を中央揃えにするというプロパティがあるので、それを使ってあげます。 */
  /* Flexbox を指定したこの .container に対して align-items: center; としてあげれば OK なはずです。 */
  align-items: center;
}

.icon {
    background-color: rgb(214, 115, 2);
}

/* 画像を完成版のように丸くしていきましょう。 */
.icon img {
    /* border-radius: 20px; */
    border-radius: 50%;
    /* border-width というプロパティで枠の幅を設定してあげます。 */
    border-width: 4px;
    /* border-style というプロパティで線の種類を選んであげます。 */
    border-style: solid;
    /* border-color で枠の色を指定することができます。 */
    border-color: white;
}

.info {
    /* background-color: tomato; */
    margin-left: 55px;

}

.info h1 {
    /* 太字にするかどうかは font-weight プロパティで指定してあげます。 */
    /* ここで normal としてあげると普通の細さになるはずです。 */
    font-weight: normal;
    /* 次に font-size プロパティで文字の大きさを指定してあげましょう。 */
    font-size: 24px;
    /* それから上下の margin もいったんリセットしたいので margin: 0; としてあげて上下左右全ての margin を 0 にしてあげましょう。 */
    margin: 0;
}

.info p {
    margin: 0;
    margin-bottom: 16px;
}   

.info ul {
    margin-bottom: 10;
    padding: 0;
    /* リストの先頭の黒丸を消すには list-style-type というプロパティを使ってあげれば OK です。 */
    list-style-type: none;
    display: flex;
}

.info ul li {
    margin-right: 8px;
}

.works {
    width: 600px;
    margin-left: auto;
    margin-right: auto;
}

.image > img{
    border: 1px;
    border-style: solid;
    border-color: black;
}

/* 先ほどとの違いが微妙なのですが、空白で区切ると .works の中の全ての h1 、そして > で区切ると .works の直下の階層にある h1 という意味になります。 */
.works > h1 {
    font-weight: normal;
    font-size: 24px;
    /* 要素の中のテキストの行揃えを制御するには text-align というプロパティを使ってあげます。*/
    text-align: center;
    margin-top: 60px;
    margin-bottom: 45px;
}

.works > section {
    margin-bottom: 60px;
}

.works > section > h1 {
    font-weight: normal;
    text-align: center;
} 

.works > section > ul {
    margin-top: 0%;
    margin-bottom: 0%;
}

.works > section > ul >li {
    margin-top: 60px;
    margin-bottom: 80px;
}

.igup {
    margin-top: 30px;
    text-align: center;
}


.BGM >img {
    border: 1px;
    border-style: solid;
    border-color: black;
}

.english >img {
    border: 1px;
    border-style: solid;
    border-color: black;
}

.unity >img {
    border: 1px;
    border-style: solid;
    border-color: black;
}


.works p {
    /* .works の中の p に対して line-height というプロパティの値を 1.8 にしてあげましょう。 */
    /* 行間がゆったりしたのでうまくいったようです。 */
    line-height: 1.8;
}

.count {
    text-align: center;
    margin-bottom: 60px;
}

.count p {
    font-size: 12px;
    margin-top: 0%;
}


